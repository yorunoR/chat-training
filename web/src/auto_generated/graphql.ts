import gql from 'graphql-tag'
import * as Urql from '@urql/vue'
export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> }
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> }
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  ISO8601DateTime: any
}

export type Mutation = {
  __typename?: 'Mutation'
  /** サインイン */
  signinUser?: Maybe<SigninUserPayload>
}

export type MutationSigninUserArgs = {
  input: SigninUserInput
}

export type Query = {
  __typename?: 'Query'
  /** Userの一覧取得 */
  ping: Scalars['String']
}

/** Autogenerated input type of SigninUser */
export type SigninUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
}

/** Autogenerated return type of SigninUser. */
export type SigninUserPayload = {
  __typename?: 'SigninUserPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  user: User
}

export type User = {
  __typename?: 'User'
  activated: Scalars['Boolean']
  createdAt: Scalars['ISO8601DateTime']
  email?: Maybe<Scalars['String']>
  id: Scalars['ID']
  name?: Maybe<Scalars['String']>
  uid?: Maybe<Scalars['String']>
  updatedAt: Scalars['ISO8601DateTime']
}

export type SigninUserMutationVariables = Exact<{ [key: string]: never }>

export type SigninUserMutation = {
  __typename?: 'Mutation'
  signinUser?: {
    __typename?: 'SigninUserPayload'
    user: { __typename?: 'User'; uid?: string | null }
  } | null
}

export type PingQueryVariables = Exact<{ [key: string]: never }>

export type PingQuery = { __typename?: 'Query'; ping: string }

export const SigninUserDocument = gql`
  mutation SigninUser {
    signinUser(input: {}) {
      user {
        uid
      }
    }
  }
`

export function useSigninUserMutation() {
  return Urql.useMutation<SigninUserMutation, SigninUserMutationVariables>(SigninUserDocument)
}
export const PingDocument = gql`
  query Ping {
    ping
  }
`

export function usePingQuery(
  options: Omit<Urql.UseQueryArgs<never, PingQueryVariables>, 'query'> = {}
) {
  return Urql.useQuery<PingQuery>({ query: PingDocument, ...options })
}
