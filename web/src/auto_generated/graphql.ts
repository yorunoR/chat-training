import gql from 'graphql-tag'
import * as Urql from '@urql/vue'
export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> }
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> }
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  ISO8601DateTime: any
}

export type AnswerHistory = {
  __typename?: 'AnswerHistory'
  answer: Scalars['String']
  createdAt: Scalars['ISO8601DateTime']
  id: Scalars['ID']
  question: Scalars['String']
  updatedAt: Scalars['ISO8601DateTime']
  userId: Scalars['Int']
}

export type Mutation = {
  __typename?: 'Mutation'
  /** 回答保存 */
  saveAnswer?: Maybe<SaveAnswerPayload>
  /** 質問送信 */
  sendQuestion?: Maybe<SendQuestionPayload>
  /** サインイン */
  signinUser?: Maybe<SigninUserPayload>
}

export type MutationSaveAnswerArgs = {
  input: SaveAnswerInput
}

export type MutationSendQuestionArgs = {
  input: SendQuestionInput
}

export type MutationSigninUserArgs = {
  input: SigninUserInput
}

export type Query = {
  __typename?: 'Query'
  /** CurrentUser 取得 */
  currentUser: User
  /** Userの一覧取得 */
  ping: Scalars['String']
}

/** Autogenerated input type of SaveAnswer */
export type SaveAnswerInput = {
  answer: Scalars['String']
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  question: Scalars['String']
}

/** Autogenerated return type of SaveAnswer. */
export type SaveAnswerPayload = {
  __typename?: 'SaveAnswerPayload'
  answerHistory: AnswerHistory
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
}

/** Autogenerated input type of SendQuestion */
export type SendQuestionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  question: Scalars['String']
}

/** Autogenerated return type of SendQuestion. */
export type SendQuestionPayload = {
  __typename?: 'SendQuestionPayload'
  answer: Scalars['String']
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
}

/** Autogenerated input type of SigninUser */
export type SigninUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
}

/** Autogenerated return type of SigninUser. */
export type SigninUserPayload = {
  __typename?: 'SigninUserPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  user: User
}

export type User = {
  __typename?: 'User'
  activated: Scalars['Boolean']
  /** 回答履歴一覧 */
  answerHistories: Array<AnswerHistory>
  createdAt: Scalars['ISO8601DateTime']
  email?: Maybe<Scalars['String']>
  id: Scalars['ID']
  name?: Maybe<Scalars['String']>
  uid?: Maybe<Scalars['String']>
  updatedAt: Scalars['ISO8601DateTime']
}

export type SaveAnswerMutationVariables = Exact<{
  question: Scalars['String']
  answer: Scalars['String']
}>

export type SaveAnswerMutation = {
  __typename?: 'Mutation'
  saveAnswer?: {
    __typename?: 'SaveAnswerPayload'
    answerHistory: { __typename?: 'AnswerHistory'; id: string }
  } | null
}

export type SendQuestionMutationVariables = Exact<{
  question: Scalars['String']
}>

export type SendQuestionMutation = {
  __typename?: 'Mutation'
  sendQuestion?: { __typename?: 'SendQuestionPayload'; answer: string } | null
}

export type SigninUserMutationVariables = Exact<{ [key: string]: never }>

export type SigninUserMutation = {
  __typename?: 'Mutation'
  signinUser?: {
    __typename?: 'SigninUserPayload'
    user: { __typename?: 'User'; uid?: string | null }
  } | null
}

export type CurrentUserQueryVariables = Exact<{ [key: string]: never }>

export type CurrentUserQuery = {
  __typename?: 'Query'
  currentUser: {
    __typename?: 'User'
    id: string
    name?: string | null
    email?: string | null
    answerHistories: Array<{
      __typename?: 'AnswerHistory'
      id: string
      question: string
      answer: string
      createdAt: any
    }>
  }
}

export type PingQueryVariables = Exact<{ [key: string]: never }>

export type PingQuery = { __typename?: 'Query'; ping: string }

export const SaveAnswerDocument = gql`
  mutation SaveAnswer($question: String!, $answer: String!) {
    saveAnswer(input: { question: $question, answer: $answer }) {
      answerHistory {
        id
      }
    }
  }
`

export function useSaveAnswerMutation() {
  return Urql.useMutation<SaveAnswerMutation, SaveAnswerMutationVariables>(SaveAnswerDocument)
}
export const SendQuestionDocument = gql`
  mutation SendQuestion($question: String!) {
    sendQuestion(input: { question: $question }) {
      answer
    }
  }
`

export function useSendQuestionMutation() {
  return Urql.useMutation<SendQuestionMutation, SendQuestionMutationVariables>(SendQuestionDocument)
}
export const SigninUserDocument = gql`
  mutation SigninUser {
    signinUser(input: {}) {
      user {
        uid
      }
    }
  }
`

export function useSigninUserMutation() {
  return Urql.useMutation<SigninUserMutation, SigninUserMutationVariables>(SigninUserDocument)
}
export const CurrentUserDocument = gql`
  query CurrentUser {
    currentUser {
      id
      name
      email
      answerHistories {
        id
        question
        answer
        createdAt
      }
    }
  }
`

export function useCurrentUserQuery(
  options: Omit<Urql.UseQueryArgs<never, CurrentUserQueryVariables>, 'query'> = {}
) {
  return Urql.useQuery<CurrentUserQuery>({ query: CurrentUserDocument, ...options })
}
export const PingDocument = gql`
  query Ping {
    ping
  }
`

export function usePingQuery(
  options: Omit<Urql.UseQueryArgs<never, PingQueryVariables>, 'query'> = {}
) {
  return Urql.useQuery<PingQuery>({ query: PingDocument, ...options })
}
